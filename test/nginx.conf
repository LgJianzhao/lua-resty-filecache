user  nobody;
worker_processes  auto;

error_log  logs/error.log  info;
pid        logs/nginx.pid;
master_process on;
working_directory /tmp;

events {
    worker_connections  1024;
}


http {
    # include       /usr/local/ngx_openresty/nginx/conf/mime.types;
    #default_type  application/octet-stream;

    log_format  main    '$remote_addr|$remote_user|$time_local|$request|'
                        '$status|$request_time|$body_bytes_sent|$http_referer|'
                        '$http_user_agent|$http_x_forwarded_for|$http_x_real_ip|';
        
    
    lua_code_cache  on;
    sendfile        on;

    client_body_buffer_size 1m;
    client_max_body_size 1m;
    client_body_timeout 3m;
    
    tcp_nodelay on;

    keepalive_timeout  65;
    lua_socket_buffer_size 256k;
    lua_check_client_abort off;

    lua_package_path "/root/work/GitHub/lua-resty-filecache/lib/?.lua;;";
    init_worker_by_lua_block {
        -- Import the module
        local filecache = require("resty.filecache")
        -- Start timer, regularly clean up the handle.
        filecache.start_cleanup_timer(600) --600 seconds no write operation, close the file handle.
    }
    
    server {
        listen 199 default; 
        location /writelog {
            content_by_lua_block {
                local time = ngx.localtime()
                local date = string.sub(time,1,4) .. string.sub(time,6,7) .. string.sub(time, 9,10)
                local hour = string.sub(time, 12,13) 
                local filename = string.format("/tmp/logs/myserver/%s/%s.log", date, hour)
                
                local filecache = require("resty.filecache")
                ngx.req.read_body()
                local log = ngx.req.get_body_data()
                log = log .. "\n"
                local err = filecache.write(filename, log)
                if err then 
                    ngx.log(ngx.ERR, "write log to [", filename, "] failed! err:", tostring(err))
                end
            }
        }
    }
}
